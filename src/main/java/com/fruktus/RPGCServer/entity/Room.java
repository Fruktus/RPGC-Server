package com.fruktus.RPGCServer.entity;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.util.Set;
import java.util.UUID;

@Entity
@Table(name = "rooms")
@EqualsAndHashCode(of = {"id"})
public class Room {
    @Id
    @Getter
    private UUID id;

    @ManyToOne
    @Getter
    private User owner;

    @ManyToMany
    @Getter
    private Set<User> players;

    @Getter
    private Boolean active;

    @Getter
    @Setter
    private String name;

    @Getter
    @Setter
    private Boolean visible;

    @Getter
    @Setter
    private String password; //maybe add hash, non-critical though

    public Room(User owner, String name, Boolean visible, String password) {
        this.id = UUID.randomUUID(); // TODO ??? shouldnt be autogenerated? user gets it differently
        this.name = name;
        this.owner = owner;
        this.players = Set.of(owner);
        this.active = true;
        this.visible = visible;
        this.password = password;
    }

    public void addPlayer(User player) {
        this.players.add(player);
    }

    public void removePlayer(User player) {
//        if (player.equals(owner)) {
//            BadUserActionException.raise("Owner can't leave room");
//        }
        // if owner exits, transfer ownership to someone else, if that was last person, delete room
        this.players.remove(player);
    }

    public void changeOwner(User player) {
//        if (!players.contains(player)) {
//            BadUserActionException.raise("Not in room");
//        }
        this.owner = player;
    }

    public void SetInactive(){
        this.active = false;
    }
}
